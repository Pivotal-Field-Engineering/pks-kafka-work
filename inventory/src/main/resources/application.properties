
server.port=8089
spring.cloud.stream.schemaRegistryClient.endpoint=http://localhost:8081
spring.cloud.stream.kafka.binder.brokers=localhost



#Inventory Out Message Channel Config
spring.cloud.stream.bindings.inventoryout.destination=inventory-topic
spring.cloud.stream.bindings.inventoryout.producer.useNativeEncoding=true
spring.cloud.stream.kafka.bindings.inventoryout.producer.configuration.contentType=application/*+avro
spring.cloud.stream.kafka.bindings.inventoryout.producer.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.bindings.inventoryout.producer.configuration.value.serializer=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
spring.cloud.stream.kafka.bindings.inventoryout.producer.configuration.schema.registry.url=http://localhost:8081


#KStream Producer Config for messages to Order-event-topic
spring.cloud.stream.bindings.orderstreamout.destination=order-event-topic
spring.cloud.stream.bindings.orderstreamout.producer.use-native-encoding=true
spring.cloud.stream.kafka.streams.bindings.orderstreamout.producer.configuration.use-native-encoding=true
spring.cloud.stream.kafka.streams.bindings.orderstreamout.producer.configuration.contentType=application/*+avro
spring.cloud.stream.kafka.streams.bindings.orderstreamout.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.orderstreamout.producer.value-serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.bindings.orderstreamout.producer.configuration.schema.registry.url=http://localhost:8081


#KStream Consumer Config for messages from order-event-topic
spring.cloud.stream.bindings.orderstreamin.destination=order-event-topic
spring.cloud.stream.bindings.orderstreamin.consumer.use-native-decoding=true
spring.cloud.stream.kafka.streams.bindings.orderstreamin.consumer.application-id=order-inv-consumer-v1
spring.cloud.stream.kafka.streams.bindings.orderstreamin.consumer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.orderstreamin.consumer.value-serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.bindings.orderstreamin.consumer.configuration.schema.registry.url=http://localhost:8081


#Input Channel Configuration for Inventory Topic
spring.cloud.stream.bindings.inventoryin.destination=inventory-topic
spring.cloud.stream.bindings.inventoryin.consumer.useNativeDecoding=true
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.configuration.contentType=application/*+avro
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.application-id=inventory-consumer-v1
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.value-serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.configuration.schema.registry.url=http://localhost:8081
spring.cloud.stream.kafka.streams.bindings.inventoryin.consumer.materialized-as=inventory-store
