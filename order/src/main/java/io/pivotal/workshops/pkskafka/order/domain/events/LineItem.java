/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pivotal.workshops.pkskafka.order.domain.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LineItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8870514049310388239L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineItem\",\"namespace\":\"io.pivotal.workshops.pkskafka.order.domain.events\",\"fields\":[{\"name\":\"sku\",\"type\":\"string\"},{\"name\":\"lineNumber\",\"type\":\"int\"},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"LineItemState\",\"symbols\":[\"placed\",\"in_process\",\"validated\",\"insufficient_inventory\",\"canceled\"]}},{\"name\":\"originalPrice\",\"type\":\"float\"},{\"name\":\"discount\",\"type\":\"float\"},{\"name\":\"purchasePrice\",\"type\":\"float\"},{\"name\":\"estimatedUnitTax\",\"type\":\"float\"},{\"name\":\"upc\",\"type\":\"string\"},{\"name\":\"estimatedDeliveryDate\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineItem> ENCODER =
      new BinaryMessageEncoder<LineItem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineItem> DECODER =
      new BinaryMessageDecoder<LineItem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LineItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LineItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LineItem>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LineItem to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LineItem from a ByteBuffer. */
  public static LineItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sku;
  @Deprecated public int lineNumber;
  @Deprecated public io.pivotal.workshops.pkskafka.order.domain.events.LineItemState state;
  @Deprecated public float originalPrice;
  @Deprecated public float discount;
  @Deprecated public float purchasePrice;
  @Deprecated public float estimatedUnitTax;
  @Deprecated public java.lang.CharSequence upc;
  @Deprecated public java.lang.CharSequence estimatedDeliveryDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineItem() {}

  /**
   * All-args constructor.
   * @param sku The new value for sku
   * @param lineNumber The new value for lineNumber
   * @param state The new value for state
   * @param originalPrice The new value for originalPrice
   * @param discount The new value for discount
   * @param purchasePrice The new value for purchasePrice
   * @param estimatedUnitTax The new value for estimatedUnitTax
   * @param upc The new value for upc
   * @param estimatedDeliveryDate The new value for estimatedDeliveryDate
   */
  public LineItem(java.lang.CharSequence sku, java.lang.Integer lineNumber, io.pivotal.workshops.pkskafka.order.domain.events.LineItemState state, java.lang.Float originalPrice, java.lang.Float discount, java.lang.Float purchasePrice, java.lang.Float estimatedUnitTax, java.lang.CharSequence upc, java.lang.CharSequence estimatedDeliveryDate) {
    this.sku = sku;
    this.lineNumber = lineNumber;
    this.state = state;
    this.originalPrice = originalPrice;
    this.discount = discount;
    this.purchasePrice = purchasePrice;
    this.estimatedUnitTax = estimatedUnitTax;
    this.upc = upc;
    this.estimatedDeliveryDate = estimatedDeliveryDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sku;
    case 1: return lineNumber;
    case 2: return state;
    case 3: return originalPrice;
    case 4: return discount;
    case 5: return purchasePrice;
    case 6: return estimatedUnitTax;
    case 7: return upc;
    case 8: return estimatedDeliveryDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sku = (java.lang.CharSequence)value$; break;
    case 1: lineNumber = (java.lang.Integer)value$; break;
    case 2: state = (io.pivotal.workshops.pkskafka.order.domain.events.LineItemState)value$; break;
    case 3: originalPrice = (java.lang.Float)value$; break;
    case 4: discount = (java.lang.Float)value$; break;
    case 5: purchasePrice = (java.lang.Float)value$; break;
    case 6: estimatedUnitTax = (java.lang.Float)value$; break;
    case 7: upc = (java.lang.CharSequence)value$; break;
    case 8: estimatedDeliveryDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sku' field.
   * @return The value of the 'sku' field.
   */
  public java.lang.CharSequence getSku() {
    return sku;
  }

  /**
   * Sets the value of the 'sku' field.
   * @param value the value to set.
   */
  public void setSku(java.lang.CharSequence value) {
    this.sku = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * @return The value of the 'lineNumber' field.
   */
  public java.lang.Integer getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * @param value the value to set.
   */
  public void setLineNumber(java.lang.Integer value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public io.pivotal.workshops.pkskafka.order.domain.events.LineItemState getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(io.pivotal.workshops.pkskafka.order.domain.events.LineItemState value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'originalPrice' field.
   * @return The value of the 'originalPrice' field.
   */
  public java.lang.Float getOriginalPrice() {
    return originalPrice;
  }

  /**
   * Sets the value of the 'originalPrice' field.
   * @param value the value to set.
   */
  public void setOriginalPrice(java.lang.Float value) {
    this.originalPrice = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public java.lang.Float getDiscount() {
    return discount;
  }

  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(java.lang.Float value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'purchasePrice' field.
   * @return The value of the 'purchasePrice' field.
   */
  public java.lang.Float getPurchasePrice() {
    return purchasePrice;
  }

  /**
   * Sets the value of the 'purchasePrice' field.
   * @param value the value to set.
   */
  public void setPurchasePrice(java.lang.Float value) {
    this.purchasePrice = value;
  }

  /**
   * Gets the value of the 'estimatedUnitTax' field.
   * @return The value of the 'estimatedUnitTax' field.
   */
  public java.lang.Float getEstimatedUnitTax() {
    return estimatedUnitTax;
  }

  /**
   * Sets the value of the 'estimatedUnitTax' field.
   * @param value the value to set.
   */
  public void setEstimatedUnitTax(java.lang.Float value) {
    this.estimatedUnitTax = value;
  }

  /**
   * Gets the value of the 'upc' field.
   * @return The value of the 'upc' field.
   */
  public java.lang.CharSequence getUpc() {
    return upc;
  }

  /**
   * Sets the value of the 'upc' field.
   * @param value the value to set.
   */
  public void setUpc(java.lang.CharSequence value) {
    this.upc = value;
  }

  /**
   * Gets the value of the 'estimatedDeliveryDate' field.
   * @return The value of the 'estimatedDeliveryDate' field.
   */
  public java.lang.CharSequence getEstimatedDeliveryDate() {
    return estimatedDeliveryDate;
  }

  /**
   * Sets the value of the 'estimatedDeliveryDate' field.
   * @param value the value to set.
   */
  public void setEstimatedDeliveryDate(java.lang.CharSequence value) {
    this.estimatedDeliveryDate = value;
  }

  /**
   * Creates a new LineItem RecordBuilder.
   * @return A new LineItem RecordBuilder
   */
  public static io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder newBuilder() {
    return new io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder();
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineItem RecordBuilder
   */
  public static io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder newBuilder(io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder other) {
    return new io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder(other);
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing LineItem instance.
   * @param other The existing instance to copy.
   * @return A new LineItem RecordBuilder
   */
  public static io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder newBuilder(io.pivotal.workshops.pkskafka.order.domain.events.LineItem other) {
    return new io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder(other);
  }

  /**
   * RecordBuilder for LineItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineItem>
    implements org.apache.avro.data.RecordBuilder<LineItem> {

    private java.lang.CharSequence sku;
    private int lineNumber;
    private io.pivotal.workshops.pkskafka.order.domain.events.LineItemState state;
    private float originalPrice;
    private float discount;
    private float purchasePrice;
    private float estimatedUnitTax;
    private java.lang.CharSequence upc;
    private java.lang.CharSequence estimatedDeliveryDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sku)) {
        this.sku = data().deepCopy(fields()[0].schema(), other.sku);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[3].schema(), other.originalPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.purchasePrice)) {
        this.purchasePrice = data().deepCopy(fields()[5].schema(), other.purchasePrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.estimatedUnitTax)) {
        this.estimatedUnitTax = data().deepCopy(fields()[6].schema(), other.estimatedUnitTax);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.upc)) {
        this.upc = data().deepCopy(fields()[7].schema(), other.upc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.estimatedDeliveryDate)) {
        this.estimatedDeliveryDate = data().deepCopy(fields()[8].schema(), other.estimatedDeliveryDate);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LineItem instance
     * @param other The existing instance to copy.
     */
    private Builder(io.pivotal.workshops.pkskafka.order.domain.events.LineItem other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sku)) {
        this.sku = data().deepCopy(fields()[0].schema(), other.sku);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.originalPrice)) {
        this.originalPrice = data().deepCopy(fields()[3].schema(), other.originalPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.discount)) {
        this.discount = data().deepCopy(fields()[4].schema(), other.discount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.purchasePrice)) {
        this.purchasePrice = data().deepCopy(fields()[5].schema(), other.purchasePrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.estimatedUnitTax)) {
        this.estimatedUnitTax = data().deepCopy(fields()[6].schema(), other.estimatedUnitTax);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.upc)) {
        this.upc = data().deepCopy(fields()[7].schema(), other.upc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.estimatedDeliveryDate)) {
        this.estimatedDeliveryDate = data().deepCopy(fields()[8].schema(), other.estimatedDeliveryDate);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'sku' field.
      * @return The value.
      */
    public java.lang.CharSequence getSku() {
      return sku;
    }

    /**
      * Sets the value of the 'sku' field.
      * @param value The value of 'sku'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setSku(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sku = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sku' field has been set.
      * @return True if the 'sku' field has been set, false otherwise.
      */
    public boolean hasSku() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sku' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearSku() {
      sku = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineNumber' field.
      * @return The value.
      */
    public java.lang.Integer getLineNumber() {
      return lineNumber;
    }

    /**
      * Sets the value of the 'lineNumber' field.
      * @param value The value of 'lineNumber'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setLineNumber(int value) {
      validate(fields()[1], value);
      this.lineNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lineNumber' field has been set.
      * @return True if the 'lineNumber' field has been set, false otherwise.
      */
    public boolean hasLineNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lineNumber' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearLineNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItemState getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setState(io.pivotal.workshops.pkskafka.order.domain.events.LineItemState value) {
      validate(fields()[2], value);
      this.state = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearState() {
      state = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'originalPrice' field.
      * @return The value.
      */
    public java.lang.Float getOriginalPrice() {
      return originalPrice;
    }

    /**
      * Sets the value of the 'originalPrice' field.
      * @param value The value of 'originalPrice'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setOriginalPrice(float value) {
      validate(fields()[3], value);
      this.originalPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'originalPrice' field has been set.
      * @return True if the 'originalPrice' field has been set, false otherwise.
      */
    public boolean hasOriginalPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'originalPrice' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearOriginalPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public java.lang.Float getDiscount() {
      return discount;
    }

    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setDiscount(float value) {
      validate(fields()[4], value);
      this.discount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearDiscount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchasePrice' field.
      * @return The value.
      */
    public java.lang.Float getPurchasePrice() {
      return purchasePrice;
    }

    /**
      * Sets the value of the 'purchasePrice' field.
      * @param value The value of 'purchasePrice'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setPurchasePrice(float value) {
      validate(fields()[5], value);
      this.purchasePrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'purchasePrice' field has been set.
      * @return True if the 'purchasePrice' field has been set, false otherwise.
      */
    public boolean hasPurchasePrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'purchasePrice' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearPurchasePrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedUnitTax' field.
      * @return The value.
      */
    public java.lang.Float getEstimatedUnitTax() {
      return estimatedUnitTax;
    }

    /**
      * Sets the value of the 'estimatedUnitTax' field.
      * @param value The value of 'estimatedUnitTax'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setEstimatedUnitTax(float value) {
      validate(fields()[6], value);
      this.estimatedUnitTax = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedUnitTax' field has been set.
      * @return True if the 'estimatedUnitTax' field has been set, false otherwise.
      */
    public boolean hasEstimatedUnitTax() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'estimatedUnitTax' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearEstimatedUnitTax() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'upc' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpc() {
      return upc;
    }

    /**
      * Sets the value of the 'upc' field.
      * @param value The value of 'upc'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setUpc(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.upc = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'upc' field has been set.
      * @return True if the 'upc' field has been set, false otherwise.
      */
    public boolean hasUpc() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'upc' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearUpc() {
      upc = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedDeliveryDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedDeliveryDate() {
      return estimatedDeliveryDate;
    }

    /**
      * Sets the value of the 'estimatedDeliveryDate' field.
      * @param value The value of 'estimatedDeliveryDate'.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder setEstimatedDeliveryDate(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.estimatedDeliveryDate = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedDeliveryDate' field has been set.
      * @return True if the 'estimatedDeliveryDate' field has been set, false otherwise.
      */
    public boolean hasEstimatedDeliveryDate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'estimatedDeliveryDate' field.
      * @return This builder.
      */
    public io.pivotal.workshops.pkskafka.order.domain.events.LineItem.Builder clearEstimatedDeliveryDate() {
      estimatedDeliveryDate = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineItem build() {
      try {
        LineItem record = new LineItem();
        record.sku = fieldSetFlags()[0] ? this.sku : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lineNumber = fieldSetFlags()[1] ? this.lineNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.state = fieldSetFlags()[2] ? this.state : (io.pivotal.workshops.pkskafka.order.domain.events.LineItemState) defaultValue(fields()[2]);
        record.originalPrice = fieldSetFlags()[3] ? this.originalPrice : (java.lang.Float) defaultValue(fields()[3]);
        record.discount = fieldSetFlags()[4] ? this.discount : (java.lang.Float) defaultValue(fields()[4]);
        record.purchasePrice = fieldSetFlags()[5] ? this.purchasePrice : (java.lang.Float) defaultValue(fields()[5]);
        record.estimatedUnitTax = fieldSetFlags()[6] ? this.estimatedUnitTax : (java.lang.Float) defaultValue(fields()[6]);
        record.upc = fieldSetFlags()[7] ? this.upc : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.estimatedDeliveryDate = fieldSetFlags()[8] ? this.estimatedDeliveryDate : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineItem>
    READER$ = (org.apache.avro.io.DatumReader<LineItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
